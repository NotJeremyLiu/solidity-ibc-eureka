package ics20lib_test

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/cosmos/solidity-ibc-eureka/abigen/ics20lib"
	"github.com/stretchr/testify/require"
)

const solidityEncodedHex = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a307861346164346636386430623931636664313936383763383831653530663361303032343238323863000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30786364313732326633393437646566346366313434363739646133396334633332626463333536383100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c736f6d655265636569766572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d656d6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

func TestEncodeFungibleTokenPacketData(t *testing.T) {
	packetData := ics20lib.IICS20TransferMsgsFungibleTokenPacketDataV2{
		Tokens: []ics20lib.IICS20TransferMsgsToken{
			{
				Denom: ics20lib.IICS20TransferMsgsDenom{
					Base: "uatom",
					Trace: []ics20lib.IICS20TransferMsgsHop{
						{
							PortId:   "portid",
							ClientId: "channelid",
						},
					},
				},
				Amount: big.NewInt(100),
			},
		},
		Sender:   "somesender",
		Receiver: "somereceiver",
		Memo:     "somememo",
		Forwarding: ics20lib.IICS20TransferMsgsForwardingPacketData{
			DestinationMemo: "destinationmemo",
			Hops: []ics20lib.IICS20TransferMsgsHop{
				{
					PortId:   "portid",
					ClientId: "channelid",
				},
			},
		},
	}

	encoded, err := ics20lib.EncodeFungibleTokenPacketData(packetData)
	require.NoError(t, err)

	decoded, err := ics20lib.DecodeFungibleTokenPacketData(encoded)
	require.NoError(t, err)

	require.Equal(t, packetData, decoded)
}

func TestDecodeFungibleTokenPacketData(t *testing.T) {
	encodedData, err := hex.DecodeString(solidityEncodedHex)
	require.NoError(t, err)

	decoded, err := ics20lib.DecodeFungibleTokenPacketData(encodedData)
	require.NoError(t, err)

	expectedData := ics20lib.IICS20TransferMsgsFungibleTokenPacketDataV2{
		Tokens: []ics20lib.IICS20TransferMsgsToken{
			{
				Denom: ics20lib.IICS20TransferMsgsDenom{
					Base:  "0xa4ad4f68d0b91cfd19687c881e50f3a00242828c",
					Trace: []ics20lib.IICS20TransferMsgsHop{},
				},
				Amount: big.NewInt(1000000000000000000),
			},
		},
		Sender:   "0xcd1722f3947def4cf144679da39c4c32bdc35681",
		Receiver: "someReceiver",
		Memo:     "memo",
		Forwarding: ics20lib.IICS20TransferMsgsForwardingPacketData{
			DestinationMemo: "",
			Hops:            []ics20lib.IICS20TransferMsgsHop{},
		},
	}
	require.Equal(t, expectedData, decoded)
}
